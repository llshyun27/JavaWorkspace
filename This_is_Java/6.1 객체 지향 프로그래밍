객체 지향 프로그래밍 : 부품에 해당하는 객체들을 먼저 만들고, 이것들을 하나씩 조립해서 완성된 프로그램을 만드는 기법

6.1.1 객체란?
객체 : 자신의 속성을 가지고 있고 다른 것과 식별 가능한 것, 동작+속성으로 구성
속성 -> 필드, 동작 -> 메소드

6.1.2 객체의 상호작용
객체의 상호작용은 객체 간의 메소드 호출을 의미한다.
int result = calculator.add(10,20);  // calculator 객체의 add(메소드)함수 기능을 이용
객체의 상호작용은 객체 간의 메소드 호출을 의미하며 매개값과 리턴값을 통해서 데이터를 주고 받음

6.1.4 객체 지향 프로그래밍의 특징
1) 캡슐화
- 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것-> 외부객체는 객체가 노출해서 제공하는 필드/메소드만 사용 가능
2) 상속
- 상위 객체는 자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있게 한다.
- 상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와주고, 이미 잘 개발된 객체를 재사용해서 새로운 객체를 만들어
반복된 코드의 중복을 줄여준다.
3) 다형성
- 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.